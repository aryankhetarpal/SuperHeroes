@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop;
@inject JsonFileProductService ProductService
@inject IJSRuntime JSRuntime

<div>

    <!--Search and Filter Section-->
    <div class="row">
        <div class="col">

            <!-- Search Input and Buttons-->
            <input placeholder="Enter the Product" type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>
</div>

<div class="row hidden-md-up">
    @{
        //Retrieve and Filter product list
        var productList = ProductService.GetProducts();
        productList = productList.OrderBy(m => m.Title);

        // If filter is enabled, reduce the data set to the filter string
        if (FilterData)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
        }

        if (productList.Any())
        {
            <!--Display Filtered Products-->
            <div class="card-columns">
            @foreach(var product in productList)
            {
                <div class="card">

                    <!--Product Image-->
                    <div class="card-img" style="background-image: url('@product.Image');"></div>

                        <div class="card-body">

                            <!-- Product Title-->
                            <h5 class="card-title">@product.Title</h5>
                        </div>

                        <div class="card-footer">
                            <small class="text-muted">

                            <!--More Info Button-->    
                            <button @onclick="(e => SelectProduct(product.Id))"
                                        data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                    More Info
                                </button>
                            </small>

                        <!--Created Add to Cart button-->
                        <button class="addtocart" @onclick="(e => AddToCart(product))">Add to Cart</button>
                        
                        <!-- Display the message -->
                        @if (productAddedToCart == product.Id)
                        {
                            <span id="addedToCart" class="text-success flex-column row ml-2">Added to Cart</span>
                        }
                        </div>
                </div>
            }
            </div>
        }
        else
        {
            <!--No Products found message-->
            <div class="container">
                <span class="text-danger">Sorry!! No Product Found</span>
            </div>
        }
    }
</div>

@if(selectedProduct != null)
{
  <!--Product Modal-->
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">

          <!--Product title in Modal-->
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">

          <!--Product details in Modal-->
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">

                <!--Product description-->
                <p class="card-text">@selectedProduct.Description</p>

                <!--order note and size selection-->
                <h5 style="color:red">Order Note</h5>
                <input type="text" id="textboxid" placeholder="Input you custom requirements" class="form-text"><br>
                            <p>Please select your Shirt Size:</p>

                            <!--Radio button for size selections-->
                            <input type="radio" id="shirt-size-small" name="S" value="small">
                            <label for="shirt-size-small">Small(S)</label><br>
                            <input type="radio" id="shirt-size-medium" name="M" value="medium">
                            <label for="shirt-size-medium">Medium(M)</label><br>
                            <input type="radio" id="shirt-size-large" name="L" value="large">
                            <label for="shirt-size-large">Large(L)</label><br>
                            <input type="radio" id="shirt-size-xlarge" name="XL" value="xlarge">
                            <label for="shirt-size-xlarge">X-Large(XL)</label><br>
                            <button class="btn btn-success">Save</button><br><br>
                <small>Shopping Cart</small>
                <ul>
                    @foreach (var item in ShoppingCart)
                    {
                        <li>@item.Title - $@item.Price - 1 shirt</li>
                    }
                </ul>
            </div>
          </div>
        </div>
        <div class="modal-footer">

          <!--Display like/dislike and rating-->
          @if(voteCount == 0)
          {
            <span>Like our Shirt</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }

          <!--Star rating-->
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
                <span class="fa fa-smile checked" @onclick="(e => SubmitRating(currentStar))">&#xf118;</span>
            }
            else
            {
                <span class="fa fa-smile" @onclick="(e => SubmitRating(currentStar))">&#xf118;</span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

<!--Font Awesome styles-->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    // Current selected product for modal display
    ProductModel selectedProduct = new ProductModel { Title = "Black Panther" };
    string selectedProductId;
    string FilterDataString = "";
    bool FilterData = false;

    //Method to select a product and display its details in the modal
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    // Method to get the current rating of the selected product
    void GetCurrentRating()
    {
        if(selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    // Method to submit a rating for the selected product
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    string productAddedToCart;

    // New property for the shopping cart
    List<ProductModel> ShoppingCart { get; set; } = new List<ProductModel>();

    // Add product to the shopping cart
    void AddToCart(ProductModel product)
    {
        ShoppingCart.Add(product);
        productAddedToCart = product.Id;
        StateHasChanged();
        Console.WriteLine("Added to Cart");
        Task.Delay(2000).ContinueWith(_ => productAddedToCart = null);
    }

    // Method to update the filter text
    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    // Method to enable the filter
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    // Method to clear the filter
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterDataString = null;
    }

}