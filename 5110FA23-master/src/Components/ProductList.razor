@using SuperHeroes.WebSite.Services
@using SuperHeroes.WebSite.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop;
@using System.Reflection.Metadata;
@inject JsonFileProductService ProductService
@inject IJSRuntime JSRuntime

<div class="align-content-between">
    <!--Search and Filter Section-->
    <div class="row">

        <div class="col">

            <!-- Search Input and Buttons-->
            <input placeholder="Enter the Product" type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button id="enableFilter" @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>

        </div>

        <div class="col align-content-between">
            <!-- Product Comparison Section -->
            <h5 class="text-center text-danger">Product Comparison</h5>
            <div class="col text-center rounded align-content-center">
                @if (SelectedProductsForComparison.Count >= 2)
                {
                    <div class="comparison-table col">
                        <!-- Display product attributes for comparison -->
                        <div class="comparison-header card col">
                            @foreach (var product in SelectedProductsForComparison)
                            {
                                <div class="col">
                                    <img class="row"src="@product.Image" alt="@product.Title" width="50" height="50" />
                                    <div class="row">
                                        <span>@product.Title</span>
                                    </div>
                                    <div class="row">
                                        <span>Price -</span>
                                        <div>@product.Price</div><br />
                                    </div>
                                    <div class="row">
                                        <span>Material - @product.Material</span>
                                    </div>
                                    
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (SelectedProductsForComparison.Count >= 1)
                {
                    <span class="align-content-end text-center">Select one more product for comparison</span>
                }
                else
                {
                    <span class="align-content-end text-center">Select at least two products for comparison</span>
                }
            </div>
        </div>




    </div>
</div>

<div class="row hidden-md-up">
    @{
        //Retrieve and Filter product list
        var productList = ProductService.GetProducts();
        productList = productList.OrderBy(m => m.Title);

        // If filter is enabled, reduce the data set to the filter string
        if (FilterData)
        {
            productList = productList.Where(m => m.Title.IndexOf(FilterDataString, StringComparison.OrdinalIgnoreCase)!=-1);
        }

        if (productList.Any())
        {
            <!--Display Filtered Products-->
            <div class="card-columns">
                @foreach(var product in productList)
                {
                    <div class="card">
                        <!--Product Image-->
                        <div class="card-img" style="background-image: url('@product.Image');"></div>

                            <div class="card-body">
                                <!-- Product Title-->
                                <h5 class="card-title">@product.Title</h5>
                            </div>

                            <div class="card-footer">
                                <small class="text-muted">
                                    <!--More Info Button-->    
                                    <button @onclick="(e => SelectProduct(product.Id))"
                                                data-toggle="modal" data-target="#productModal" id="MoreInfoButton_@product.Id" class="btn btn-primary">
                                            More Info
                                    </button>
                                </small>

                            <!-- Select for Comparison Button -->
                            <button @onclick="(e => ToggleProductSelection(product.Id))" class="btn btn-info">
                                @if (SelectedProductsForComparison.Contains(product))
                                {
                                    <span>Remove from Comparison</span>
                                }
                                else
                                {
                                    <span>Add to Comparison</span>
                                }
                            </button>

                            <!-- Notification for successful addition -->
                            @if (AddedToComparisonProductId == product.Id)
                            {
                                <div class="notification">
                                    <span class="text-success">Added to Comparison!</span>
                                </div>
                            }
                            
                                <a href="@product.Url" class="btn btn-dark" target="_blank">Visit Website <i class="fa-solid fa-shirt"></i></a>
                            </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!--No Products found message-->
            <div class="container">
                <span class="text-danger">Sorry!! No Product Found</span>
            </div>
        }
    }
</div>

@if(selectedProduct != null)
{
  <!--Product Modal-->
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">

          <!--Product title in Modal-->
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">

          <!--Product details in Modal-->
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">

                <!--Product description-->
                <p class="card-text">@selectedProduct.Description</p>
                            <!--order note and size selection-->
                            <h5 style="color:red">Order Note</h5>
                            <div class="row">
                                <div class="col">
                                    @{
                                        // First show all the existing comments
                                        foreach (var comment in selectedProduct.CommentList)
                                        {
                                            <div class="row">
                                                <div class="col">
                                                    @comment.Comment
                                                </div>
                                            </div>
                                        }

                                        // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                        if (NewComment)
                                        {
                                            <div class="row">
                                                <div class="col">
                                                    <input placeholder="Enter Custom Requirements" type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" value="@NewCommentText" />
                                                    <button id="Comment" @onclick="(e => AddComment())" class="btn btn-success" data-toggle="modal">Save Order Form</button>
                                                </div>
                                            </div>
                                        }

                                        // If this is not a new oredr form, then show the buttons for Adding comment and Close
                                        if (NewComment == false)
                                        {
                                            <div class="row">
                                                <div class="col">
                                                    <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-customised">Add Order Form</button>
                                                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">

          <!--Display like/dislike and rating-->
          @if(voteCount == 0)
          {
            <span>Like our Shirt</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }

          <!--Star rating-->
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
                <span class="fa fa-smile checked" @onclick="(e => SubmitRating(currentStar))"></span>
            }
            else
            {
                <span class="fa fa-smile" @onclick="(e => SubmitRating(currentStar))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

<!--Font Awesome styles-->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    // Current selected product for modal display
    public ProductModel selectedProduct = new ProductModel { Title = "Black Panther" };
    string selectedProductId;
    public string FilterDataString = "";
    public bool FilterData = false;

    //Method to select a product and display its details in the modal
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    // Method to get the current rating of the selected product
    public void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    // Method to submit a rating for the selected product
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    // Method to enable the filter
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
      FilterData = true;
    }

    // Method to clear the filter
    public void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterDataString = null;
    }

    // New Comment Flag to show the input box or not
     public bool NewComment = false;

    // Next Comment Text is what the comment text is
    public string NewCommentText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    public void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }


    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    public void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    public void AddComment()
    {
        if (selectedProduct != null)
        {
            // Add it to the Comment List
            selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });

            // Call for the Product to be saved
            ProductService.UpdateData(selectedProduct);

            // Set the NewComment flag to false to hide the input box
            NewComment = false;
        }
        else
        {
            // Handle the case where selectedProduct is null
            Console.WriteLine("Cannot add comment: selectedProduct is null");
        }
    }

    List<ProductModel> SelectedProductsForComparison = new List<ProductModel>();
    string AddedToComparisonProductId = null;

    void ToggleProductSelection(string productId)
    {

        var product = ProductService.GetProducts().FirstOrDefault(p => p.Id == productId);
        if (product != null)
        {

            // Convert the product ID to the same type as in the SelectedProductsForComparison list
            var matchingProduct = SelectedProductsForComparison.FirstOrDefault(p => p.Id.ToString() == productId);

            if (matchingProduct != null)
            {
                SelectedProductsForComparison.Remove(matchingProduct);
            }
            else
            {
                SelectedProductsForComparison.Add(product);
                AddedToComparisonProductId = product.Id.ToString();

                // Reset the notification after a short delay (e.g., 2000 milliseconds)
                Task.Delay(2000).ContinueWith(_ => AddedToComparisonProductId = null);
            }
        }
    }
}